name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest || echo "No tests found, skipping..."

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          echo "image=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update GitOps repository
        env:
          GIH_TOKEN: ${{ secrets.GIH_TOKEN }}
          GITOPS_REPO: ${{ secrets.GITOPS_REPOSITORY_NAME }}
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail

          # 토큰 포함한 URL로 바로 클론 (PAT 사용, 사용자명은 GitHub 로그인 아이디나 $GITHUB_ACTOR 사용)
          git clone https://${GITHUB_ACTOR}:${GIH_TOKEN}@github.com/${OWNER}/${GITOPS_REPO}.git
          cd "${GITOPS_REPO}"

          # 사용자 정보 설정
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

          # 이미지 태그 업데이트
          sed -i "s|image: .*|image: ${{ steps['build-image'].outputs.image }}|g" k8s/base/deployment.yaml

          # 커밋 & 푸시
          git add -A
          git commit -m "Update image to ${{ github.sha }}" || echo "No changes to commit"
          git push origin main
